version: '3.8'

services:
  # Database - PostgreSQL with SSL
  postgres:
    image: postgres:16.3-alpine
    container_name: peykan_postgres
    environment:
      POSTGRES_DB: peykan
      POSTGRES_USER: peykan_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./postgres/pg_hba.conf:/etc/postgresql/pg_hba.conf:ro
    # حذف پورت عمومی - فقط دسترسی داخلی
    # ports:
    #   - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U peykan_user -d peykan"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - peykan_internal
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Redis - امن و بدون دسترسی بیرونی
  redis:
    image: redis:7.4-alpine
    container_name: peykan_redis
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
      - redis_logs:/var/log/redis
    command: ["redis-server", "/usr/local/etc/redis/redis.conf", "--requirepass", "${REDIS_PASSWORD}"]
    # حذف پورت عمومی - فقط دسترسی داخلی
    # ports:
    #   - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - peykan_internal
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Django Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: peykan_backend
    env_file:
      - ./backend/.env.production
    environment:
      - DEBUG=False
      - DATABASE_URL=postgresql://peykan_user:${POSTGRES_PASSWORD}@postgres:5432/peykan
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/1
      - DJANGO_SETTINGS_MODULE=peykan.settings_production
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - ./backend/logs:/app/logs
    # حذف پورت عمومی - فقط از طریق nginx
    # ports:
    #   - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - peykan_internal
      - peykan_external
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Next.js Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: peykan_frontend
    environment:
      - NEXT_PUBLIC_API_URL=https://yourdomain.com/api/v1
      - NEXT_PUBLIC_SITE_URL=https://yourdomain.com
      - NODE_ENV=production
    # حذف پورت عمومی - فقط از طریق nginx
    # ports:
    #   - "3000:3000"
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - peykan_internal
      - peykan_external
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.1'

  # Nginx Reverse Proxy - تنها سرویس با دسترسی بیرونی
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: peykan_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - nginx_logs:/var/log/nginx
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    networks:
      - peykan_external

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  redis_logs:
    driver: local
  static_volume:
    driver: local
  media_volume:
    driver: local
  nginx_logs:
    driver: local

networks:
  peykan_internal:
    driver: bridge
    internal: true  # شبکه داخلی بدون دسترسی به اینترنت
  peykan_external:
    driver: bridge
