version: "3.8"

services:
  # Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: peykan
      POSTGRES_USER: peykan_user
      POSTGRES_PASSWORD: peykan_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U peykan_user -d peykan"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Django Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    env_file:
      - ./backend/env.production
    environment:
      - DEBUG=True
      - SECURE_SSL_REDIRECT=False
      - USE_X_FORWARDED_HOST=True
      - SECURE_PROXY_SSL_HEADER=HTTP_X_FORWARDED_PROTO,https
      - DJANGO_SETTINGS_MODULE=peykan.settings_production
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - ./backend/logs:/app/logs
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             gunicorn peykan.wsgi:application --bind 0.0.0.0:8000 --workers 4 --worker-class gevent --worker-connections 1000 --timeout 120 --keep-alive 5 --max-requests 1000 --max-requests-jitter 100"

  # Next.js Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    environment:
      - NEXT_PUBLIC_API_URL=https://peykantravelistanbul.com/api/v1
      - NEXT_PUBLIC_SITE_URL=https://peykantravelistanbul.com
      - NODE_ENV=production
    ports:
      - "3000:3000"
    depends_on:
      - backend
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:3000/",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Reverse Proxy
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - nginx_logs:/var/log/nginx
      - certbot_etc:/etc/letsencrypt
      - certbot_var:/var/lib/letsencrypt
      - certbot_webroot:/var/www/certbot
    depends_on:
      - backend
      - frontend
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    profiles:
      - production

  # Certbot (manual run when issuing/renewing certificates)
  certbot:
    image: certbot/certbot:latest
    volumes:
      - certbot_etc:/etc/letsencrypt
      - certbot_var:/var/lib/letsencrypt
      - certbot_webroot:/var/www/certbot
    entrypoint: sh -c
    command: "sleep infinity"

volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume:
  nginx_logs:
  certbot_etc:
  certbot_var:
  certbot_webroot:

networks:
  default:
    name: peykan_network
