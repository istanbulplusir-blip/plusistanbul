# Generated by Django 5.0.2 on 2025-06-26 23:44

import django.core.validators
import django.db.models.deletion
import parler.fields
import parler.models
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Artist',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is active')),
                ('slug', models.SlugField(max_length=255, unique=True, verbose_name='Slug')),
                ('image', models.ImageField(upload_to='artists/', verbose_name='Image')),
                ('website', models.URLField(blank=True, verbose_name='Website')),
                ('social_media', models.JSONField(blank=True, default=dict, verbose_name='Social media')),
            ],
            options={
                'verbose_name': 'Artist',
                'verbose_name_plural': 'Artists',
            },
            bases=(parler.models.TranslatableModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='EventCategory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is active')),
                ('slug', models.SlugField(max_length=255, unique=True, verbose_name='Slug')),
                ('image', models.ImageField(upload_to='products/', verbose_name='Image')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Base price (USD)')),
                ('currency', models.CharField(default='USD', max_length=3, verbose_name='Currency')),
                ('city', models.CharField(max_length=100, verbose_name='City')),
                ('country', models.CharField(max_length=100, verbose_name='Country')),
                ('is_featured', models.BooleanField(default=False, verbose_name='Is featured')),
                ('is_popular', models.BooleanField(default=False, verbose_name='Is popular')),
                ('icon', models.CharField(blank=True, max_length=50, verbose_name='Icon')),
                ('color', models.CharField(default='#28a745', max_length=7, verbose_name='Color')),
            ],
            options={
                'verbose_name': 'Event Category',
                'verbose_name_plural': 'Event Categories',
            },
            bases=(parler.models.TranslatableModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='EventCategoryTranslation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('language_code', models.CharField(db_index=True, max_length=15, verbose_name='Language')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('description', models.TextField(verbose_name='Description')),
            ],
            options={
                'verbose_name': 'Event Category Translation',
                'db_table': 'events_eventcategory_translation',
                'db_tablespace': '',
                'managed': True,
                'default_permissions': (),
            },
            bases=(parler.models.TranslatedFieldsModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='EventOption',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('name', models.CharField(max_length=100, verbose_name='Name')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Price')),
                ('currency', models.CharField(default='USD', max_length=3, verbose_name='Currency')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is active')),
                ('option_type', models.CharField(choices=[('service', 'Service'), ('equipment', 'Equipment'), ('food', 'Food'), ('transport', 'Transport'), ('parking', 'Parking')], default='service', max_length=20, verbose_name='Option type')),
                ('is_available', models.BooleanField(default=True, verbose_name='Is available')),
                ('max_quantity', models.PositiveIntegerField(blank=True, null=True, verbose_name='Maximum quantity')),
            ],
            options={
                'verbose_name': 'Event Option',
                'verbose_name_plural': 'Event Options',
            },
        ),
        migrations.CreateModel(
            name='EventPerformance',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is active')),
                ('start_date', models.DateField(verbose_name='Start date')),
                ('end_date', models.DateField(verbose_name='End date')),
                ('start_time', models.TimeField(verbose_name='Start time')),
                ('end_time', models.TimeField(verbose_name='End time')),
                ('is_available', models.BooleanField(default=True, verbose_name='Is available')),
                ('max_capacity', models.PositiveIntegerField(verbose_name='Maximum capacity')),
                ('current_capacity', models.PositiveIntegerField(default=0, verbose_name='Current capacity')),
                ('date', models.DateField(verbose_name='Date')),
                ('is_special', models.BooleanField(default=False, verbose_name='Is special performance')),
                ('ticket_capacities', models.JSONField(default=dict, verbose_name='Ticket type capacities')),
            ],
            options={
                'verbose_name': 'Event Performance',
                'verbose_name_plural': 'Event Performances',
            },
        ),
        migrations.CreateModel(
            name='EventReview',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is active')),
                ('rating', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Rating')),
                ('title', models.CharField(max_length=255, verbose_name='Title')),
                ('comment', models.TextField(verbose_name='Comment')),
                ('is_verified', models.BooleanField(default=False, verbose_name='Is verified')),
                ('is_helpful', models.PositiveIntegerField(default=0, verbose_name='Helpful votes')),
            ],
            options={
                'verbose_name': 'Event Review',
                'verbose_name_plural': 'Event Reviews',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='EventTranslation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('language_code', models.CharField(db_index=True, max_length=15, verbose_name='Language')),
                ('title', models.CharField(max_length=255, verbose_name='Title')),
                ('description', models.TextField(verbose_name='Description')),
                ('short_description', models.TextField(max_length=500, verbose_name='Short description')),
                ('highlights', models.TextField(blank=True, verbose_name='Highlights')),
                ('rules', models.TextField(blank=True, verbose_name='Rules and regulations')),
                ('required_items', models.TextField(blank=True, verbose_name='Required items')),
            ],
            options={
                'verbose_name': 'Event Translation',
                'db_table': 'events_event_translation',
                'db_tablespace': '',
                'managed': True,
                'default_permissions': (),
            },
            bases=(parler.models.TranslatedFieldsModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Seat',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is active')),
                ('seat_number', models.CharField(max_length=20, verbose_name='Seat number')),
                ('row_number', models.CharField(max_length=10, verbose_name='Row number')),
                ('section', models.CharField(max_length=50, verbose_name='Section')),
                ('status', models.CharField(choices=[('available', 'Available'), ('reserved', 'Reserved'), ('sold', 'Sold'), ('blocked', 'Blocked')], default='available', max_length=20, verbose_name='Status')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Price')),
                ('currency', models.CharField(default='USD', max_length=3, verbose_name='Currency')),
                ('is_wheelchair_accessible', models.BooleanField(default=False, verbose_name='Wheelchair accessible')),
                ('is_premium', models.BooleanField(default=False, verbose_name='Premium seat')),
            ],
            options={
                'verbose_name': 'Seat',
                'verbose_name_plural': 'Seats',
            },
        ),
        migrations.CreateModel(
            name='TicketType',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('name', models.CharField(max_length=100, verbose_name='Name')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('price_modifier', models.DecimalField(decimal_places=2, default=0.0, max_digits=5, verbose_name='Price modifier')),
                ('capacity', models.PositiveIntegerField(verbose_name='Capacity')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is active')),
                ('ticket_type', models.CharField(choices=[('vip', 'VIP'), ('eco', 'Eco'), ('normal', 'Normal'), ('wheelchair', 'Wheelchair'), ('student', 'Student'), ('senior', 'Senior')], max_length=20, verbose_name='Ticket type')),
                ('benefits', models.JSONField(blank=True, default=list, verbose_name='Benefits')),
                ('age_min', models.PositiveIntegerField(blank=True, null=True, verbose_name='Minimum age')),
                ('age_max', models.PositiveIntegerField(blank=True, null=True, verbose_name='Maximum age')),
            ],
            options={
                'verbose_name': 'Ticket Type',
                'verbose_name_plural': 'Ticket Types',
            },
        ),
        migrations.CreateModel(
            name='Venue',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is active')),
                ('slug', models.SlugField(max_length=255, unique=True, verbose_name='Slug')),
                ('image', models.ImageField(upload_to='venues/', verbose_name='Image')),
                ('website', models.URLField(blank=True, verbose_name='Website')),
                ('city', models.CharField(max_length=100, verbose_name='City')),
                ('country', models.CharField(max_length=100, verbose_name='Country')),
                ('coordinates', models.JSONField(blank=True, null=True, verbose_name='Coordinates')),
                ('total_capacity', models.PositiveIntegerField(verbose_name='Total capacity')),
                ('facilities', models.JSONField(blank=True, default=list, verbose_name='Facilities')),
            ],
            options={
                'verbose_name': 'Venue',
                'verbose_name_plural': 'Venues',
            },
            bases=(parler.models.TranslatableModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='VenueTranslation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('language_code', models.CharField(db_index=True, max_length=15, verbose_name='Language')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('description', models.TextField(verbose_name='Description')),
                ('address', models.TextField(verbose_name='Address')),
            ],
            options={
                'verbose_name': 'Venue Translation',
                'db_table': 'events_venue_translation',
                'db_tablespace': '',
                'managed': True,
                'default_permissions': (),
            },
            bases=(parler.models.TranslatedFieldsModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ArtistTranslation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('language_code', models.CharField(db_index=True, max_length=15, verbose_name='Language')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('bio', models.TextField(verbose_name='Bio')),
                ('master', parler.fields.TranslationsForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='translations', to='events.artist')),
            ],
            options={
                'verbose_name': 'Artist Translation',
                'db_table': 'events_artist_translation',
                'db_tablespace': '',
                'managed': True,
                'default_permissions': (),
            },
            bases=(parler.models.TranslatedFieldsModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is active')),
                ('slug', models.SlugField(max_length=255, unique=True, verbose_name='Slug')),
                ('image', models.ImageField(upload_to='products/', verbose_name='Image')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Base price (USD)')),
                ('currency', models.CharField(default='USD', max_length=3, verbose_name='Currency')),
                ('city', models.CharField(max_length=100, verbose_name='City')),
                ('country', models.CharField(max_length=100, verbose_name='Country')),
                ('is_featured', models.BooleanField(default=False, verbose_name='Is featured')),
                ('is_popular', models.BooleanField(default=False, verbose_name='Is popular')),
                ('style', models.CharField(choices=[('music', 'Music'), ('sports', 'Sports'), ('theater', 'Theater'), ('festival', 'Festival'), ('conference', 'Conference'), ('exhibition', 'Exhibition')], max_length=20, verbose_name='Style')),
                ('door_open_time', models.TimeField(verbose_name='Door open time')),
                ('start_time', models.TimeField(verbose_name='Start time')),
                ('end_time', models.TimeField(verbose_name='End time')),
                ('age_restriction', models.PositiveIntegerField(blank=True, null=True, verbose_name='Age restriction')),
                ('gallery', models.JSONField(blank=True, default=list, verbose_name='Gallery')),
                ('artists', models.ManyToManyField(related_name='events', to='events.artist', verbose_name='Artists')),
            ],
            options={
                'verbose_name': 'Event',
                'verbose_name_plural': 'Events',
            },
            bases=(parler.models.TranslatableModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='EventBooking',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is active')),
                ('booking_date', models.DateField(verbose_name='Booking date')),
                ('booking_time', models.TimeField(verbose_name='Booking time')),
                ('participants_count', models.PositiveIntegerField(default=1, verbose_name='Participants count')),
                ('unit_price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Unit price')),
                ('total_price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Total price')),
                ('currency', models.CharField(default='USD', max_length=3, verbose_name='Currency')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('confirmed', 'Confirmed'), ('cancelled', 'Cancelled'), ('completed', 'Completed')], default='pending', max_length=20, verbose_name='Status')),
                ('booking_reference', models.CharField(max_length=20, unique=True, verbose_name='Booking reference')),
                ('selected_seats', models.JSONField(default=list, verbose_name='Selected seats')),
                ('ticket_breakdown', models.JSONField(default=list, verbose_name='Ticket breakdown')),
                ('selected_options', models.JSONField(default=list, verbose_name='Selected options')),
                ('options_total', models.DecimalField(decimal_places=2, default=0.0, max_digits=10, verbose_name='Options total')),
                ('special_requirements', models.TextField(blank=True, verbose_name='Special requirements')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bookings', to='events.event', verbose_name='Event')),
            ],
            options={
                'verbose_name': 'Event Booking',
                'verbose_name_plural': 'Event Bookings',
                'ordering': ['-created_at'],
            },
        ),
    ]
